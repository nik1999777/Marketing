/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery, useMutation } from "react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  ChannelDto,
  ChannelInputDto,
  ChannelCategoryDto,
  PageDto,
  ChannelPageSettings,
  ShorteningUrlParams,
  ChannelStatDto,
  GetChannelStatParams,
  GetSolutions200,
  ChannelInfoDto,
  GetChannelInfoParams,
} from "../model";
import { axiosInstance } from "../../http/axiosInstance";

export const updateChannel = (channelInputDto: ChannelInputDto) => {
  return axiosInstance<ChannelDto>({
    url: `/api/v1/crm/channel`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: channelInputDto,
  });
};

export type UpdateChannelMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateChannel>>
>;
export type UpdateChannelMutationBody = ChannelInputDto;
export type UpdateChannelMutationError = unknown;

export const useUpdateChannel = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateChannel>>,
    TError,
    { data: ChannelInputDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateChannel>>,
    { data: ChannelInputDto }
  > = (props) => {
    const { data } = props ?? {};

    return updateChannel(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof updateChannel>>,
    TError,
    { data: ChannelInputDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const addChannel = (channelInputDto: ChannelInputDto) => {
  return axiosInstance<ChannelDto>({
    url: `/api/v1/crm/channel`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: channelInputDto,
  });
};

export type AddChannelMutationResult = NonNullable<
  Awaited<ReturnType<typeof addChannel>>
>;
export type AddChannelMutationBody = ChannelInputDto;
export type AddChannelMutationError = unknown;

export const useAddChannel = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addChannel>>,
    TError,
    { data: ChannelInputDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addChannel>>,
    { data: ChannelInputDto }
  > = (props) => {
    const { data } = props ?? {};

    return addChannel(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof addChannel>>,
    TError,
    { data: ChannelInputDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const getCategories = (signal?: AbortSignal) => {
  return axiosInstance<ChannelCategoryDto[]>({
    url: `/api/v1/crm/channel/category`,
    method: "get",
    signal,
  });
};

export const getGetCategoriesQueryKey = () => [`/api/v1/crm/channel/category`];

export type GetCategoriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCategories>>
>;
export type GetCategoriesQueryError = unknown;

export const useGetCategories = <
  TData = Awaited<ReturnType<typeof getCategories>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getCategories>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCategoriesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategories>>> = ({
    signal,
  }) => getCategories(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getCategories>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const updateCategory = (channelCategoryDto: ChannelCategoryDto) => {
  return axiosInstance<ChannelCategoryDto>({
    url: `/api/v1/crm/channel/category`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: channelCategoryDto,
  });
};

export type UpdateCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateCategory>>
>;
export type UpdateCategoryMutationBody = ChannelCategoryDto;
export type UpdateCategoryMutationError = unknown;

export const useUpdateCategory = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateCategory>>,
    TError,
    { data: ChannelCategoryDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateCategory>>,
    { data: ChannelCategoryDto }
  > = (props) => {
    const { data } = props ?? {};

    return updateCategory(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof updateCategory>>,
    TError,
    { data: ChannelCategoryDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const addCategory = (channelCategoryDto: ChannelCategoryDto) => {
  return axiosInstance<ChannelCategoryDto>({
    url: `/api/v1/crm/channel/category`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: channelCategoryDto,
  });
};

export type AddCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof addCategory>>
>;
export type AddCategoryMutationBody = ChannelCategoryDto;
export type AddCategoryMutationError = unknown;

export const useAddCategory = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addCategory>>,
    TError,
    { data: ChannelCategoryDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addCategory>>,
    { data: ChannelCategoryDto }
  > = (props) => {
    const { data } = props ?? {};

    return addCategory(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof addCategory>>,
    TError,
    { data: ChannelCategoryDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const getChannels = (channelPageSettings: ChannelPageSettings) => {
  return axiosInstance<PageDto>({
    url: `/api/v1/crm/channel/all`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: channelPageSettings,
  });
};

export type GetChannelsMutationResult = NonNullable<
  Awaited<ReturnType<typeof getChannels>>
>;
export type GetChannelsMutationBody = ChannelPageSettings;
export type GetChannelsMutationError = unknown;

export const useGetChannels = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getChannels>>,
    TError,
    { data: ChannelPageSettings },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getChannels>>,
    { data: ChannelPageSettings }
  > = (props) => {
    const { data } = props ?? {};

    return getChannels(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof getChannels>>,
    TError,
    { data: ChannelPageSettings },
    TContext
  >(mutationFn, mutationOptions);
};
export const getChannel = (id: string, signal?: AbortSignal) => {
  return axiosInstance<ChannelDto>({
    url: `/api/v1/crm/channel/${id}`,
    method: "get",
    signal,
  });
};

export const getGetChannelQueryKey = (id: string) => [
  `/api/v1/crm/channel/${id}`,
];

export type GetChannelQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChannel>>
>;
export type GetChannelQueryError = unknown;

export const useGetChannel = <
  TData = Awaited<ReturnType<typeof getChannel>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getChannel>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannel>>> = ({
    signal,
  }) => getChannel(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof getChannel>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions }
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const deleteChannel = (id: string) => {
  return axiosInstance<void>({
    url: `/api/v1/crm/channel/${id}`,
    method: "delete",
  });
};

export type DeleteChannelMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteChannel>>
>;

export type DeleteChannelMutationError = unknown;

export const useDeleteChannel = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteChannel>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteChannel>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteChannel(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteChannel>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const shorteningUrl = (
  params: ShorteningUrlParams,
  signal?: AbortSignal
) => {
  return axiosInstance<string>({
    url: `/api/v1/crm/channel/url/shortening`,
    method: "get",
    params,
    signal,
  });
};

export const getShorteningUrlQueryKey = (params: ShorteningUrlParams) => [
  `/api/v1/crm/channel/url/shortening`,
  ...(params ? [params] : []),
];

export type ShorteningUrlQueryResult = NonNullable<
  Awaited<ReturnType<typeof shorteningUrl>>
>;
export type ShorteningUrlQueryError = unknown;

export const useShorteningUrl = <
  TData = Awaited<ReturnType<typeof shorteningUrl>>,
  TError = unknown
>(
  params: ShorteningUrlParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof shorteningUrl>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShorteningUrlQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof shorteningUrl>>> = ({
    signal,
  }) => shorteningUrl(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof shorteningUrl>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getChannelStat = (
  params: GetChannelStatParams,
  signal?: AbortSignal
) => {
  return axiosInstance<ChannelStatDto>({
    url: `/api/v1/crm/channel/stat`,
    method: "get",
    params,
    signal,
  });
};

export const getGetChannelStatQueryKey = (params: GetChannelStatParams) => [
  `/api/v1/crm/channel/stat`,
  ...(params ? [params] : []),
];

export type GetChannelStatQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChannelStat>>
>;
export type GetChannelStatQueryError = unknown;

export const useGetChannelStat = <
  TData = Awaited<ReturnType<typeof getChannelStat>>,
  TError = unknown
>(
  params: GetChannelStatParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getChannelStat>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelStatQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannelStat>>> = ({
    signal,
  }) => getChannelStat(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getChannelStat>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getTechStack = (signal?: AbortSignal) => {
  return axiosInstance<string[]>({
    url: `/api/v1/crm/channel/stack`,
    method: "get",
    signal,
  });
};

export const getGetTechStackQueryKey = () => [`/api/v1/crm/channel/stack`];

export type GetTechStackQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTechStack>>
>;
export type GetTechStackQueryError = unknown;

export const useGetTechStack = <
  TData = Awaited<ReturnType<typeof getTechStack>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getTechStack>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTechStackQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTechStack>>> = ({
    signal,
  }) => getTechStack(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getTechStack>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getSolutions = (signal?: AbortSignal) => {
  return axiosInstance<GetSolutions200>({
    url: `/api/v1/crm/channel/solution`,
    method: "get",
    signal,
  });
};

export const getGetSolutionsQueryKey = () => [`/api/v1/crm/channel/solution`];

export type GetSolutionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSolutions>>
>;
export type GetSolutionsQueryError = unknown;

export const useGetSolutions = <
  TData = Awaited<ReturnType<typeof getSolutions>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getSolutions>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSolutionsQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getSolutions>>> = ({
    signal,
  }) => getSolutions(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getSolutions>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const getChannelInfo = (
  params: GetChannelInfoParams,
  signal?: AbortSignal
) => {
  return axiosInstance<ChannelInfoDto>({
    url: `/api/v1/crm/channel/info`,
    method: "get",
    params,
    signal,
  });
};

export const getGetChannelInfoQueryKey = (params: GetChannelInfoParams) => [
  `/api/v1/crm/channel/info`,
  ...(params ? [params] : []),
];

export type GetChannelInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getChannelInfo>>
>;
export type GetChannelInfoQueryError = unknown;

export const useGetChannelInfo = <
  TData = Awaited<ReturnType<typeof getChannelInfo>>,
  TError = unknown
>(
  params: GetChannelInfoParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getChannelInfo>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetChannelInfoQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getChannelInfo>>> = ({
    signal,
  }) => getChannelInfo(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getChannelInfo>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};

export const deleteCategory = (id: string) => {
  return axiosInstance<void>({
    url: `/api/v1/crm/channel/category/${id}`,
    method: "delete",
  });
};

export type DeleteCategoryMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCategory>>
>;

export type DeleteCategoryMutationError = unknown;

export const useDeleteCategory = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCategory>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCategory>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteCategory(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof deleteCategory>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
