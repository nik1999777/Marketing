/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery, useMutation } from "react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  ClientDto,
  IncomingRequestDto,
  PageDto,
  ClientPageSettings,
} from "../model";
import { axiosInstance } from "../../http/axiosInstance";

export const updateClient = (clientDto: ClientDto) => {
  return axiosInstance<ClientDto>({
    url: `/api/v1/crm/client`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: clientDto,
  });
};

export type UpdateClientMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateClient>>
>;
export type UpdateClientMutationBody = ClientDto;
export type UpdateClientMutationError = unknown;

export const useUpdateClient = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateClient>>,
    TError,
    { data: ClientDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateClient>>,
    { data: ClientDto }
  > = (props) => {
    const { data } = props ?? {};

    return updateClient(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof updateClient>>,
    TError,
    { data: ClientDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const addClient = (clientDto: ClientDto) => {
  return axiosInstance<ClientDto>({
    url: `/api/v1/crm/client`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: clientDto,
  });
};

export type AddClientMutationResult = NonNullable<
  Awaited<ReturnType<typeof addClient>>
>;
export type AddClientMutationBody = ClientDto;
export type AddClientMutationError = unknown;

export const useAddClient = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addClient>>,
    TError,
    { data: ClientDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addClient>>,
    { data: ClientDto }
  > = (props) => {
    const { data } = props ?? {};

    return addClient(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof addClient>>,
    TError,
    { data: ClientDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const getIncomingRequest = (id: string, signal?: AbortSignal) => {
  return axiosInstance<IncomingRequestDto[]>({
    url: `/api/v1/crm/client/${id}/request`,
    method: "get",
    signal,
  });
};

export const getGetIncomingRequestQueryKey = (id: string) => [
  `/api/v1/crm/client/${id}/request`,
];

export type GetIncomingRequestQueryResult = NonNullable<
  Awaited<ReturnType<typeof getIncomingRequest>>
>;
export type GetIncomingRequestQueryError = unknown;

export const useGetIncomingRequest = <
  TData = Awaited<ReturnType<typeof getIncomingRequest>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getIncomingRequest>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetIncomingRequestQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getIncomingRequest>>
  > = ({ signal }) => getIncomingRequest(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getIncomingRequest>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const addIncomingRequest = (
  id: string,
  incomingRequestDto: IncomingRequestDto
) => {
  return axiosInstance<void>({
    url: `/api/v1/crm/client/${id}/request`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: incomingRequestDto,
  });
};

export type AddIncomingRequestMutationResult = NonNullable<
  Awaited<ReturnType<typeof addIncomingRequest>>
>;
export type AddIncomingRequestMutationBody = IncomingRequestDto;
export type AddIncomingRequestMutationError = unknown;

export const useAddIncomingRequest = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addIncomingRequest>>,
    TError,
    { id: string; data: IncomingRequestDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addIncomingRequest>>,
    { id: string; data: IncomingRequestDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return addIncomingRequest(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof addIncomingRequest>>,
    TError,
    { id: string; data: IncomingRequestDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const getClients = (clientPageSettings: ClientPageSettings) => {
  return axiosInstance<PageDto>({
    url: `/api/v1/crm/client/all`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: clientPageSettings,
  });
};

export type GetClientsMutationResult = NonNullable<
  Awaited<ReturnType<typeof getClients>>
>;
export type GetClientsMutationBody = ClientPageSettings;
export type GetClientsMutationError = unknown;

export const useGetClients = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getClients>>,
    TError,
    { data: ClientPageSettings },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getClients>>,
    { data: ClientPageSettings }
  > = (props) => {
    const { data } = props ?? {};

    return getClients(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof getClients>>,
    TError,
    { data: ClientPageSettings },
    TContext
  >(mutationFn, mutationOptions);
};
export const getClientById = (id: string, signal?: AbortSignal) => {
  return axiosInstance<ClientDto>({
    url: `/api/v1/crm/client/${id}`,
    method: "get",
    signal,
  });
};

export const getGetClientByIdQueryKey = (id: string) => [
  `/api/v1/crm/client/${id}`,
];

export type GetClientByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getClientById>>
>;
export type GetClientByIdQueryError = unknown;

export const useGetClientById = <
  TData = Awaited<ReturnType<typeof getClientById>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getClientById>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetClientByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getClientById>>> = ({
    signal,
  }) => getClientById(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getClientById>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
