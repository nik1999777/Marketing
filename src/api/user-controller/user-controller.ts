/**
 * Generated by orval v6.10.3 🍺
 * Do not edit manually.
 * OpenAPI definition
 * OpenAPI spec version: v0
 */
import { useQuery, useMutation } from "react-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from "react-query";
import type {
  UserDto,
  UserCreateDto,
  ChangePasswordDto,
  PageDto,
  UserPageSettings,
  GetUserRoles200Item,
} from "../model";
import { axiosInstance } from "../../http/axiosInstance";

export const getUser = (signal?: AbortSignal) => {
  return axiosInstance<UserDto>({
    url: `/api/v1/crm/user`,
    method: "get",
    signal,
  });
};

export const getGetUserQueryKey = () => [`/api/v1/crm/user`];

export type GetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUser>>
>;
export type GetUserQueryError = unknown;

export const useGetUser = <
  TData = Awaited<ReturnType<typeof getUser>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getUser>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUser>>> = ({
    signal,
  }) => getUser(signal);

  const query = useQuery<Awaited<ReturnType<typeof getUser>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const updateUser = (userDto: UserDto) => {
  return axiosInstance<UserDto>({
    url: `/api/v1/crm/user`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: userDto,
  });
};

export type UpdateUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateUser>>
>;
export type UpdateUserMutationBody = UserDto;
export type UpdateUserMutationError = unknown;

export const useUpdateUser = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { data: UserDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateUser>>,
    { data: UserDto }
  > = (props) => {
    const { data } = props ?? {};

    return updateUser(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof updateUser>>,
    TError,
    { data: UserDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const addUser = (userCreateDto: UserCreateDto) => {
  return axiosInstance<UserDto>({
    url: `/api/v1/crm/user`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: userCreateDto,
  });
};

export type AddUserMutationResult = NonNullable<
  Awaited<ReturnType<typeof addUser>>
>;
export type AddUserMutationBody = UserCreateDto;
export type AddUserMutationError = unknown;

export const useAddUser = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof addUser>>,
    TError,
    { data: UserCreateDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof addUser>>,
    { data: UserCreateDto }
  > = (props) => {
    const { data } = props ?? {};

    return addUser(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof addUser>>,
    TError,
    { data: UserCreateDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const changePassword = (changePasswordDto: ChangePasswordDto) => {
  return axiosInstance<void>({
    url: `/api/v1/crm/user/changePassword`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: changePasswordDto,
  });
};

export type ChangePasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof changePassword>>
>;
export type ChangePasswordMutationBody = ChangePasswordDto;
export type ChangePasswordMutationError = unknown;

export const useChangePassword = <
  TError = unknown,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordDto },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof changePassword>>,
    { data: ChangePasswordDto }
  > = (props) => {
    const { data } = props ?? {};

    return changePassword(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof changePassword>>,
    TError,
    { data: ChangePasswordDto },
    TContext
  >(mutationFn, mutationOptions);
};
export const getUsers = (userPageSettings: UserPageSettings) => {
  return axiosInstance<PageDto>({
    url: `/api/v1/crm/user/all`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: userPageSettings,
  });
};

export type GetUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersMutationBody = UserPageSettings;
export type GetUsersMutationError = unknown;

export const useGetUsers = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof getUsers>>,
    TError,
    { data: UserPageSettings },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof getUsers>>,
    { data: UserPageSettings }
  > = (props) => {
    const { data } = props ?? {};

    return getUsers(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof getUsers>>,
    TError,
    { data: UserPageSettings },
    TContext
  >(mutationFn, mutationOptions);
};
export const getUserById = (id: string, signal?: AbortSignal) => {
  return axiosInstance<UserDto>({
    url: `/api/v1/crm/user/${id}`,
    method: "get",
    signal,
  });
};

export const getGetUserByIdQueryKey = (id: string) => [
  `/api/v1/crm/user/${id}`,
];

export type GetUserByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserById>>
>;
export type GetUserByIdQueryError = unknown;

export const useGetUserById = <
  TData = Awaited<ReturnType<typeof getUserById>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof getUserById>>,
      TError,
      TData
    >;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserByIdQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserById>>> = ({
    signal,
  }) => getUserById(id, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getUserById>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!id, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getUserRoles = (signal?: AbortSignal) => {
  return axiosInstance<GetUserRoles200Item[]>({
    url: `/api/v1/crm/user/roles`,
    method: "get",
    signal,
  });
};

export const getGetUserRolesQueryKey = () => [`/api/v1/crm/user/roles`];

export type GetUserRolesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUserRoles>>
>;
export type GetUserRolesQueryError = unknown;

export const useGetUserRoles = <
  TData = Awaited<ReturnType<typeof getUserRoles>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getUserRoles>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetUserRolesQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getUserRoles>>> = ({
    signal,
  }) => getUserRoles(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof getUserRoles>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryKey;

  return query;
};
